---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: primenumber-go
  namespace: serverless-test-apps
  annotations:
    # Causes a Passthough OpenShift Route to be created
    # so that the istio ingress gateway handles TLS:
    serving.knative.openshift.io/enablePassthrough: "true"
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
        autoscaling.knative.dev/target: '10'  # Concurrent requests per Pod (default is 100)
        autoscaling.knative.dev/maxScale: '8'
        autoscaling.knative.dev/minScale: '0'
        autoscaling.knative.dev/window: '20s' # Reduce window to speed up demo
        #autoscaling.knative.dev/activation-scale: "1"         # How many replicas will be created when initially scaling from zero
        #autoscaling.knative.dev/window: '60s'                 # Evaulation window
        #autoscaling.knative.dev/max-scale-up-rate: "1000"     # Pods can increase 1000x current value in each evaluation "window"
        #autoscaling.knative.dev/max-scale-down-rate: "2"      # One half of current Pods can be stopped in each evaluation "window"
        #autoscaling.knative.dev/scale-down-delay: "0"         # Time to wait before scaling down
    spec:
      #containerConcurrency: 5    # Optional hard limit on concurrency - causes queuing
      containers:
      - image: ghcr.io/knative/autoscale-go:latest
        resources:
          requests:
            cpu: 200m
            memory: 100Mi
        readinessProbe:
          httpGet:
            port: 8080
            path: "/"
        livenessProbe:
          tcpSocket:
            port: 8080
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]



# Default autoscaling in Serving is based on Concurrent requests 
# but can be specified on Requests per second

# Requests are sampled over 60 seconds. 
# However, a "panic" threshold double the target is evaluated every 6 seconds by default.
# This allows for faster response


# Traffic split
# spec:
#   traffic:
#     - latestRevision: true
#       percent: 90
#     - revisionName: primenumber-go-00003
#       percent: 10